// üìå Importar m√≥dulos necesarios
const passport = require("passport");
const LocalStrategy = require("passport-local").Strategy;
const bcrypt = require("bcryptjs"); // Para encriptar y comparar contrase√±as
const conectarDB = require("../conexion/conexion"); // Conexi√≥n a la base de datos


// üìå Estrategia para LOGIN (local-login)
passport.use(
    "local-login",
    new LocalStrategy(
        {
            usernameField: "correo",   // Aseg√∫rate de que este campo coincida con el nombre del campo del formulario
            passwordField: "contrase√±a", // Aqu√≠ cambiamos a 'contrase√±a'
            passReqToCallback: true,    // Permite acceder a `req` en la funci√≥n callback
        },
        async (req, correo, contrase√±a, done) => {
            try {
                const connection = await conectarDB();
                const [rows] = await connection.execute(
                    "SELECT * FROM trabajador WHERE correo = ?",
                    [correo]
                );

                if (rows.length === 0) {
                    return done(null, false, req.flash("loginMensaje", "‚ö†Ô∏è Usuario no encontrado"));
                }

                const user = rows[0]; // üìå Usuario encontrado
                console.log(user);

                // Compara la contrase√±a ingresada con la encriptada
                const validPassword = await bcrypt.compare(contrase√±a, user.contrase√±a);
                await connection.end();

                if (!validPassword) {
                    return done(null, false, req.flash("loginMensaje", "‚ö†Ô∏è Contrase√±a incorrecta"));
                }

                return done(null, user); // Usuario autenticado correctamente
            } catch (error) {
                return done(error); // Error en la autenticaci√≥n
            }
        }
    )
);


/* ---------------------- Registrar trabajadores --------------------- */
passport.use(
    "local-registrarse",
    new LocalStrategy(
        {
            passReqToCallback: true, // Permite recibir `req` para acceder a otros campos del formulario
        },
        async (req, done) => {  // Los par√°metros username y password ser√°n obtenidos del body autom√°ticamente
            try {
                // Obtener los datos directamente de `req.body`
                const { rol, nombre, apellidos, correo, tlf, estado, especialidad, contrase√±a } = req.body;

                console.log(req.body);

                // Verificar que todos los campos est√©n presentes
                if (!correo || !contrase√±a || !rol || !nombre || !apellidos || !tlf || !estado || !especialidad) {
                    req.session.error = "‚ö†Ô∏è Todos los campos son obligatorios";
                    return res.redirect('/autenticacion/registrarse'); // Redirige al formulario de registro
                }

                // Llamamos al modelo para registrar al trabajador
                const result = await registrarTrabajador(rol, nombre, apellidos, correo, tlf, estado, especialidad, contrase√±a);

                if (result.error) {
                    req.session.error = result.error; // Almacena el error en la sesi√≥n
                    return res.redirect('/autenticacion/registrarse'); // Redirige de nuevo al formulario de registro
                }

                // Si el registro es exitoso, puedes redirigir al login o donde quieras
                req.session.success = "¬°Te has registrado correctamente!";
                res.redirect('/autenticacion/login');



                return done(null, result.user);  // El trabajador fue registrado correctamente


            } catch (error) {
                console.error("‚ùå Error en registro:", error);
                return done(error); // Manejo de error
            }
        }
    )
);





module.exports = passport; // ‚úÖ Exporta solo `passport`